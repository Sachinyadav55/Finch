sweave
Sweave
install.Packages("roxygen2 ")
install.packages("roxygen2 ")
install.packages("roxygen2")
source("kmerDistance.R")#
y=kmerDistance.hpca(8)#
x=kmerDistance.dif(8)#
#
#x=sort(as.vector(data.matrix(x)))#
#y=sort(as.vector(data.matrix(y)))#
reg=lm(x~y)#
plot(x, y,xlab="Boolean analysis",ylab="hierarchical PCA")#
title(main="Boolean analysis compare with hierarchical PCA", col.main="black", font.main=4)#
abline(reg1)#
summary(reg1)$r.squared
require(Matrix)
source("kmerDistance.R")#
y=kmerDistance.hpca(8)#
x=kmerDistance.dif(8)#
#
#x=sort(as.vector(data.matrix(x)))#
#y=sort(as.vector(data.matrix(y)))#
reg=lm(x~y)#
plot(x, y,xlab="Boolean analysis",ylab="hierarchical PCA")#
title(main="Boolean analysis compare with hierarchical PCA", col.main="black", font.main=4)#
abline(reg1)#
summary(reg1)$r.squared
source("kmerDistance.R")#
y=kmerDistance.hpca(8)#
x=kmerDistance.dif(8)#
#
#x=sort(as.vector(data.matrix(x)))#
#y=sort(as.vector(data.matrix(y)))#
#
x=as.vector(data.matrix(x))#
y=as.vector(data.matrix(y))#
reg=lm(x~y)#
plot(x, y,xlab="Boolean analysis",ylab="hierarchical PCA")#
title(main="Boolean analysis compare with hierarchical PCA", col.main="black", font.main=4)#
abline(reg1)#
summary(reg1)$r.squared
source("kmerDistance.R")#
y=kmerDistance.hpca(8)#
x=kmerDistance.dif(8)#
#
#x=sort(as.vector(data.matrix(x)))#
#y=sort(as.vector(data.matrix(y)))#
#
x=as.vector(data.matrix(x))#
y=as.vector(data.matrix(y))#
reg=lm(x~y)#
plot(x, y,xlab="Boolean analysis",ylab="hierarchical PCA")#
title(main="Boolean analysis compare with hierarchical PCA", col.main="black", font.main=4)#
abline(reg)#
summary(reg)$r.squared
t(t(x))
ls
ls()
pwd
pwd()
getwd
getwd()
source("kmerDistance.R")#
y=kmerDistance.hpca(8)#
x=kmerDistance.dif(8)#
#
#x=sort(as.vector(data.matrix(x)))#
#y=sort(as.vector(data.matrix(y)))#
#
x=as.vector(data.matrix(x))#
y=as.vector(data.matrix(y))#
reg=lm(x~y)#
plot(x, y,xlab="Boolean analysis",ylab="hierarchical PCA")#
title(main="Boolean analysis compare with hierarchical PCA", col.main="black", font.main=4)#
abline(reg)#
summary(reg)$r.squared
x
y
y=kmerDistance.hpca(8)#
> x=kmerDistance.dif(8)
y=kmerDistance.hpca(8);x=kmerDistance.dif(8)
write.csv(x,'x')
write.csv(y,'y')
y=kmerDistance.hpca(8);x=kmerDistance.dif(8)
write.csv(x,'x')
write.csv(y,'y')
write.csv(y,'y.csv')
write.csv(x,'x.csv')
y=kmerDistance.hpca(8);x=kmerDistance.dif(8)
write.csv(x,'x.csv')
write.csv(y,'y.csv')
y=kmerDistance.hpca(8);x=kmerDistance.dif(8)
write.csv(y,'y.csv')
write.csv(x,'x.csv')
source("kmerDistance.R")#
y=kmerDistance.hpca(8)#
x=kmerDistance.dif(8)#
#
#x=sort(as.vector(data.matrix(x)))#
#y=sort(as.vector(data.matrix(y)))#
#
x=as.vector(data.matrix(x))#
y=as.vector(data.matrix(y))#
reg=lm(x~y)#
plot(x, y,xlab="Boolean analysis",ylab="hierarchical PCA")#
title(main="Boolean analysis compare with hierarchical PCA", col.main="black", font.main=4)#
abline(reg)#
summary(reg)$r.squared
a=sale(x)
a=scale(x)
y=scale(y)
source("kmerDistance.R")#
y=kmerDistance.hpca(8)#
x=kmerDistance.dif(8)#
#
#x=sort(as.vector(data.matrix(x)))#
#y=sort(as.vector(data.matrix(y)))#
#
x=as.vector(data.matrix(x))#
y=as.vector(data.matrix(y))#
reg=lm(x~y)#
plot(x, y,xlab="Boolean analysis",ylab="hierarchical PCA")#
title(main="Boolean analysis compare with hierarchical PCA", col.main="black", font.main=4)#
abline(reg)#
summary(reg)$r.squared
a=scale(x)
b=scale(y)
a
b
reg=lm(a~b)#
plot(a, b,xlab="Boolean analysis",ylab="hierarchical PCA")#
title(main="Boolean analysis compare with hierarchical PCA", col.main="black", font.main=4)#
abline(reg)#
summary(reg)$r.squared
source("kmerDistance.R")#
y=kmerDistance.hpca(8)#
x=kmerDistance.dif(8)#
#
x=sort(as.vector(data.matrix(x)))#
y=sort(as.vector(data.matrix(y)))#
#
#x=as.vector(data.matrix(x))#
#y=as.vector(data.matrix(y))#
reg=lm(x~y)#
plot(x, y,xlab="Boolean analysis",ylab="hierarchical PCA")#
title(main="Boolean analysis compare with hierarchical PCA", col.main="black", font.main=4)#
abline(reg)#
summary(reg)$r.squared
source("kmerDistance.R")#
y=kmerDistance.hpca(8)#
x=kmerDistance.dif(8)#
#
#x=sort(as.vector(data.matrix(x)))#
#y=sort(as.vector(data.matrix(y)))#
#
x=as.vector(data.matrix(x))#
y=as.vector(data.matrix(y))#
reg=lm(x~y)#
plot(x, y,xlab="Boolean analysis",ylab="hierarchical PCA")#
title(main="Boolean analysis compare with hierarchical PCA", col.main="black", font.main=4)#
abline(reg)#
summary(reg)$r.squared
source("kmerDistance.R")#
y=kmerDistance.hpca(8)#
x=kmerDistance.dif(8)#
#
#x=sort(as.vector(data.matrix(x)))#
#y=sort(as.vector(data.matrix(y)))#
#
x=as.vector(data.matrix(x))#
y=as.vector(data.matrix(y))#
reg=lm(x~y)#
plot(x, y,xlab="Boolean analysis",ylab="hierarchical PCA")#
title(main="Boolean analysis compare with hierarchical PCA", col.main="black", font.main=4)#
abline(reg)#
summary(reg)$r.squared
x
y=kmerDistance.hpca(8);x=kmerDistance.dif(8)
x
a=as.matrix(x)
a
a=data.matrix(x)
a
names(x)
names(x)=NULL
x
names(x)=c(1:6)
x
y=kmerDistance.hpca(8);x=kmerDistance.dif(8)
names(x)
na=names(x)
na[1]
na[1][1:3]
na[1][1]
na[1][2]
substr(na[1],1,10)
a=data.matrix(x)
a
x
log(x)
log(x[x>0])
a=x
a[a>0]=log(a[a>0])
a
a[a>0]=-log(a[a>0])
b=y
b[b>0]=-log(b[b>0])
b
reg=lm(a~b)#
plot(a, b,xlab="Boolean analysis",ylab="hierarchical PCA")#
title(main="Boolean analysis compare with hierarchical PCA", col.main="black", font.main=4)#
abline(reg)#
summary(reg)$r.squared
source("kmerDistance.R")#
y=kmerDistance.hpca(8)#
x=kmerDistance.dif(8)#
x[x>0]=-log(x[x>0])#
y[y>0]=-log(y[y>0])#
x=as.vector(data.matrix(x))#
y=as.vector(data.matrix(y))#
reg=lm(x~y)#
plot(x, y,xlab="Boolean analysis",ylab="hierarchical PCA")#
title(main="Boolean analysis compare with hierarchical PCA", col.main="black", font.main=4)#
abline(reg)#
summary(reg)$r.squared
x
y
y=kmerDistance.hpca(8)#
> x=kmerDistance.dif(8)
y=kmerDistance.hpca(8)#
 x=kmerDistance.dif(8)
y=as.vector(data.matrix(y))
x=as.vector(data.matrix(x))
x
x[x>0]
x[x>0]=(x[>0]-min(x[>0]))/(max(x[>0])-min(x[>0]))
x[x>0]=(x[x>0]-min(x[x>0]))/(max(x[x>0])-min(x[x>0]))
x
y[y>0]=(y[y>0]-min(y[y>0]))/(max(y[y>0])-min(y[y>0]))
y
reg=lm(x~y)#
plot(x, y,xlab="Boolean analysis",ylab="hierarchical PCA")#
title(main="Boolean analysis compare with hierarchical PCA", col.main="black", font.main=4)#
abline(reg)#
summary(reg)$r.squared
y=kmerDistance.hpca(8)
y
y=as.vector(data.matrix(y))
y
y=kmerDistance.hpca(8)#
 x=kmerDistance.dif(8)
x=as.vector(data.matrix(x))
x
x[x>0]=(x[x>0]-min(x[x>0]))/(max(x[x>0])-min(x[x>0]))
x
length(x)
y[y>0]=(y[y>0]-min(y[y>0]))/(max(y[y>0])-min(y[y>0]))
y
y=as.vector(data.matrix(y))
y
source("kmerDistance.R")#
y=kmerDistance.hpca(8)#
x=kmerDistance.dif(8)#
#
x=as.vector(data.matrix(x))#
y=as.vector(data.matrix(y))#
x[x>0]=(x[x>0]-min(x[x>0]))/(max(x[x>0])-min(x[x>0]))#
y[y>0]=(y[y>0]-min(y[y>0]))/(max(y[y>0])-min(y[y>0]))#
reg=lm(x~y)#
plot(x, y,xlab="Boolean analysis",ylab="hierarchical PCA")#
title(main="Boolean analysis compare with hierarchical PCA", col.main="black", font.main=4)#
abline(reg)#
summary(reg)$r.squared
source("kmerDistance.R")#
y=kmerDistance.hpca(8)#
x=kmerDistance.dif(8)#
#
x=as.vector(data.matrix(x))#
y=as.vector(data.matrix(y))#
x[x>0]=(x[x>0]-min(x[x>0]))/(max(x[x>0])-min(x[x>0]))#
y[y>0]=(y[y>0]-min(y[y>0]))/(max(y[y>0])-min(y[y>0]))#
reg=lm(x~y)#
plot(x, y,xlab="Boolean analysis",ylab="hierarchical PCA")#
title(main="Boolean analysis compare with hierarchical PCA", col.main="black", font.main=4)#
abline(reg)#
summary(reg)$r.squared
source("kmerDistance.R")#
y=kmerDistance.hpca(8)#
x=kmerDistance.dif(8)#
#
x=as.vector(data.matrix(x))#
y=as.vector(data.matrix(y))#
#x[x>0]=(x[x>0]-min(x[x>0]))/(max(x[x>0])-min(x[x>0]))#
#y[y>0]=(y[y>0]-min(y[y>0]))/(max(y[y>0])-min(y[y>0]))#
#
x[x>0]=-log(x[x>0])#
y[y>0]=-log(y[y>0])#
reg=lm(x~y)#
plot(x, y,xlab="Boolean analysis",ylab="hierarchical PCA")#
title(main="Boolean analysis compare with hierarchical PCA", col.main="black", font.main=4)#
abline(reg)#
summary(reg)$r.squared
a=c(1,2,3)
b=c(2,3,4,5)
c=list(a,c)
c
c=list(a,b)
c
c[[1]]
c[[1]][1]
c[[1]][2]
source("kmerDistance.R")#
y=kmerDistance.hpca(8)#
x=kmerDistance.dif(8)#
#
x=as.vector(data.matrix(x))#
y=as.vector(data.matrix(y))#
#x[x>0]=(x[x>0]-min(x[x>0]))/(max(x[x>0])-min(x[x>0]))#
#y[y>0]=(y[y>0]-min(y[y>0]))/(max(y[y>0])-min(y[y>0]))#
#
x[x>0]=-log(x[x>0])#
y[y>0]=-log(y[y>0])#
reg=lm(x~y)#
plot(x, y,xlab="Boolean analysis",ylab="hierarchical PCA")#
title(main="Boolean analysis compare with hierarchical PCA", col.main="black", font.main=4)#
abline(reg)#
summary(reg)$r.squared
x=as.vector(data.matrix(x))
x
x=kmerDistance.dif(8)
c
c=list()
c
c=list(a,b)
c
c=list()
c=list(c,a)
c
c=list(0)
c=list(c,a)
c
d=list(0)
d
e=list(e,a)
e=null
e=NULL
e=list(e,a)
e
e=NULL
e[[i]]=a
e[[1]]=a
e
source("kmerDistance.R")#
y=kmerDistance.hpca(8)#
x=kmerDistance.dif(8)#
#
x=as.vector(data.matrix(x))#
y=as.vector(data.matrix(y))#
#x[x>0]=(x[x>0]-min(x[x>0]))/(max(x[x>0])-min(x[x>0]))#
#y[y>0]=(y[y>0]-min(y[y>0]))/(max(y[y>0])-min(y[y>0]))#
#
x[x>0]=-log(x[x>0])#
y[y>0]=-log(y[y>0])#
reg=lm(x~y)#
plot(x, y,xlab="Boolean analysis",ylab="hierarchical PCA")#
title(main="Boolean analysis compare with hierarchical PCA", col.main="black", font.main=4)#
abline(reg)#
summary(reg)$r.squared
